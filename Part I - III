/* ----------------------------------------------------------------------------
* Copyright &copy; 2016 Aaron Thompson <aamithompson@csu.fulerton.edu>
* Released under the [MIT License] (http://opensource.org/licenses/MIT)
* ------------------------------------------------------------------------- */

#include <iostream>
#include <string>
#include <vector>
#include <list>
#include <set>

using std::cin;
using std::cout;
using std::endl;
using std::string;
using std::exception;
using std::vector;
using std::list;
using std::set;

void exception_example(int);
template<typename T>
void template_example(T&, T&);
void stl_example(int);

int main(){
	int a = 32, b = 128;
	char c;
	cout << "----------------------------------------\n";
	cout << "EXCEPTION EXAMPLE\n";
	cout << "----------------------------------------\n";
	exception_example(4);
	exception_example(-4);
	cout << endl;
	cout << "----------------------------------------\n";
	cout << "TEMPLATE EXAMPLE\n";
	cout << "----------------------------------------\n";
	template_example(a, b);
	cout << endl;
	cout << "----------------------------------------\n";
	cout << "STL EXAMPLE\n";
	cout << "----------------------------------------\n";
	stl_example(3);
	cin >> c;
}

void exception_example(int a){
	try{
		if (a < 0)
			throw exception("ERROR: Dimension size of a cube cannot be negative.\n");
		else
			cout << "Volume of the cube is: " << a*a*a << endl;
	}
	catch (exception e){
		cout << e.what();
	}
}

template<typename T>
void template_example(T& a, T& b){
	cout << "a: " << a << "  b: " << b << endl;
	cout << "Swaping. . .\n";
	T temp = a;
	a = b;
	b = temp;
	cout << "a: " << a << "  b: " << b << endl;
}

void stl_example(int size){
	vector<char> v = { 'A', 'B', 'C', 'D', 'E', 'F', 'G' };
	list<char> l = { 'A', 'B', 'C', 'D', 'E', 'F', 'G' };
	set<char> s = { 'A', 'B', 'C', 'D', 'E', 'F', 'G' };
	for (int i = 0; i < 3; i++){
		switch (i){
		case 0:
			for (int j = 0; j < v.size(); j++){
				cout << v[j] << " ";
			}
			break;
		case 1:
			for (int j = 0; j < l.size(); j++){
				list<char>::iterator it = l.begin();
				std::advance(it, j);
				cout << *it << " ";
			}
			break;
		case 2:
			for (int j = 0; j < s.size(); j++){
				cout << s.count(v[j]) << " ";
			}
			break;
		}
		cout << endl;
	}

	while (s.size() > size){
		s.erase(v[s.size()-1]);
	}

	while (v.size() > size){
		v.pop_back();
	}

	while (l.size() > size){
		l.pop_back();
	}


	for (int i = 0; i < 3; i++){
		switch (i){
		case 0:
			for (int j = 0; j < v.size(); j++){
				cout << v[j] << " ";
			}
			break;
		case 1:
			for (int j = 0; j < l.size(); j++){
				list<char>::iterator it = l.begin();
				std::advance(it, j);
				cout << *it << " ";
			}
			break;
		case 2:
			for (int j = 0; j < s.size(); j++){
				cout << s.count(v[j]) << " ";
			}
			break;
		}
		cout << endl;
	}
}
